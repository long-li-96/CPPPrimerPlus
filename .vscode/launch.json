{
    // One of the key features of Visual Studio Code is its great debugging support.
    // VS Code's built-in debugger helps accelerate your edit, compile and debug loop.
    // VS Code keeps debugging configuration information in a launch.json file
    // located in a .vscode folder in your workspace (project root folder).
    "version": "0.2.0",
    "configurations": [
        
        {
            /* ------ these three options are mandatory ------ */
            // The type of debugger to use for this launch configuration.
            "type": "cppdbg", // C++ debug cppdbg
            // The request type of this launch configuration. Currently, launch and attach are supported.
            //   If you come from a server or desktop background, 
            //   it's quite normal to have your editor launch your process for you, 
            //   and your editor automatically attaches its debugger to the newly launched process.
            //   A launch configuration starts your app in debug mode before VS Code attaches to it.
            // 大概意思是说，如果你开始debug的时候你的项目已经启起来了，那就attach（把debug的工具附加上去）
            // 如果你开始debug的时机和你启动项目的时机是相同的，那就launch
            "request": "launch", // debug的类型，launch表示启动，attach表示附加
            // The reader-friendly name to appear in the Debug launch configuration drop-down.
            "name": "C++ Debug", // 在VSCode侧边栏Run那里看到的名字（可以随便起）
            /* ------ some optional attributes available to all launch configurations ------ */
            // To launch a task before the start of a debug session, set this attribute to the label of a task specified in tasks.json.
            "preLaunchTask": "g++ compile", //在调试之前要进行的工作 compile是在 tasks.json 的编译任务里面的label
            /* ------ Many debuggers support some of the following attributes: ------ */
            // executable or file to run when launching the debugger
            // ！！不要在程序和代码的路径及文件名中出现空格！！否则无法调试（我尝试解决这个问题，但真的无法解决）
            "program": "${fileDirname}/${fileBasenameNoExtension}.out", // debug的对象(-g编译出来的二进制文件)，需要和.vscode/tasks.json中生成的可执行文件一致
            // arguments passed to the program to debug
            "args": [], // 比如运行你的程序添加输入参数（argc/argv），需要在这里添加
            // Environment variables to add to the environment for the program
            "environment": [], // 放置环境变量
            // current working directory for finding dependencies and other files
            "cwd": "${workspaceFolder}",
            // break immediately when the program launches
            "stopAtEntry": false,
            // If true, a console is launched for the debuggee.
            // If false, on Linux and Windows, it will appear in the Integrated Console.
            "externalConsole": false,
            // 为true则会打开系统终端在其中进行交互
            // 如果为 true，则为调试对象启动控制台。如果为 false，它在 Linux 和 Windows 上会显示在集成控制台中
            // macOS不适用：https://code.visualstudio.com/docs/cpp/launch-json-reference#_externalconsole
            /* ------ Customizing GDB or LLDB ------ */
            // Indicates the debugger that VS Code will connect to. Must be set to gdb or lldb. 
            // 但是macOS只安装了llbd（有可能是安装命令行工具的时候安装的），那就用lldb吧
            "MIMode": "lldb",
        }
    ]
}